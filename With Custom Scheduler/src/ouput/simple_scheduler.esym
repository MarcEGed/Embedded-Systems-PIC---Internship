D G "__PCH__" 0 0 ""5.120""
D G "__DEVICE__" 0 0 ""
D G "__DATE__" 0 0 ""11-Aug-25""
D G "__TIME__" 0 0 ""13:41:28""
D G "_UNICODE" 0 0 ""?""
D G "__EVAL" 0 0 ""?"" "Standard Header file for the PIC18F46K22 device ////////////////"
c L "set_tris_a" 1 3 6 "FUNCTION"
F N "set_tris_a" 1 45 ""
V L "value" 1 45 "int8" `55 
F B "set_tris_a" 1 45 "void(int8 value)" `54 
F N "set_tris_b" 1 46 ""
V L "value" 1 46 "int8" `57 
F B "set_tris_b" 1 46 "void(int8 value)" `56 
F N "set_tris_c" 1 47 ""
V L "value" 1 47 "int8" `59 
F B "set_tris_c" 1 47 "void(int8 value)" `58 
F N "set_tris_d" 1 48 ""
V L "value" 1 48 "int8" `61 
F B "set_tris_d" 1 48 "void(int8 value)" `60 
F N "set_tris_e" 1 49 ""
V L "value" 1 49 "int8" `63 
F B "set_tris_e" 1 49 "void(int8 value)" `62 
F N "get_tris_a" 1 50 ""
F B "get_tris_a" 1 50 "int8()" `64 
F N "get_tris_b" 1 51 ""
F B "get_tris_b" 1 51 "int8()" `65 
F N "get_tris_c" 1 52 ""
F B "get_tris_c" 1 52 "int8()" `66 
F N "get_tris_d" 1 53 ""
F B "get_tris_d" 1 53 "int8()" `67 
F N "get_tris_e" 1 54 ""
F B "get_tris_e" 1 54 "int8()" `68 
F N "output_a" 1 55 ""
V L "value" 1 55 "int8" `70 
F B "output_a" 1 55 "void(int8 value)" `69 
F N "output_b" 1 56 ""
V L "value" 1 56 "int8" `72 
F B "output_b" 1 56 "void(int8 value)" `71 
F N "output_c" 1 57 ""
V L "value" 1 57 "int8" `74 
F B "output_c" 1 57 "void(int8 value)" `73 
F N "output_d" 1 58 ""
V L "value" 1 58 "int8" `76 
F B "output_d" 1 58 "void(int8 value)" `75 
F N "output_e" 1 59 ""
V L "value" 1 59 "int8" `78 
F B "output_e" 1 59 "void(int8 value)" `77 
F N "input_a" 1 60 ""
F B "input_a" 1 60 "int8()" `79 
F N "input_b" 1 61 ""
F B "input_b" 1 61 "int8()" `80 
F N "input_c" 1 62 ""
F B "input_c" 1 62 "int8()" `81 
F N "input_d" 1 63 ""
F B "input_d" 1 63 "int8()" `82 
F N "input_e" 1 64 ""
F B "input_e" 1 64 "int8()" `83 
F N "input_change_a" 1 65 ""
F B "input_change_a" 1 65 "int8()" `84 
F N "input_change_b" 1 66 ""
F B "input_change_b" 1 66 "int8()" `85 
F N "input_change_c" 1 67 ""
F B "input_change_c" 1 67 "int8()" `86 
F N "input_change_d" 1 68 ""
F B "input_change_d" 1 68 "int8()" `87 
F N "input_change_e" 1 69 ""
F B "input_change_e" 1 69 "int8()" `88 
F N "port_b_pullups" 1 70 ""
V L "upmask" 1 70 "int8" `90 
F B "port_b_pullups" 1 70 "void(int8 upmask)" `89 
F N "port_e_pullups" 1 71 ""
V L "value" 1 71 "int8" `92 
F B "port_e_pullups" 1 71 "void(int8 value)" `91 
F N "set_slow_slew_a" 1 72 ""
V L "value" 1 72 "int8" `94 
F B "set_slow_slew_a" 1 72 "void(int8 value)" `93 
F N "set_slow_slew_b" 1 73 ""
V L "value" 1 73 "int8" `96 
F B "set_slow_slew_b" 1 73 "void(int8 value)" `95 
F N "set_slow_slew_c" 1 74 ""
V L "value" 1 74 "int8" `98 
F B "set_slow_slew_c" 1 74 "void(int8 value)" `97 
F N "set_slow_slew_d" 1 75 ""
V L "value" 1 75 "int8" `100 
F B "set_slow_slew_d" 1 75 "void(int8 value)" `99 
F N "set_slow_slew_e" 1 76 ""
V L "value" 1 76 "int8" `102 
F B "set_slow_slew_e" 1 76 "void(int8 value)" `101 
F N "input" 1 77 ""
V L "pin" 1 77 "int16" `104 
F B "input" 1 77 "int8(int16 pin)" `103 
F N "input_state" 1 78 ""
V L "pin" 1 78 "int16" `106 
F B "input_state" 1 78 "int8(int16 pin)" `105 
F N "output_low" 1 79 ""
V L "pin" 1 79 "int16" `108 
F B "output_low" 1 79 "void(int16 pin)" `107 
F N "output_high" 1 80 ""
V L "pin" 1 80 "int16" `110 
F B "output_high" 1 80 "void(int16 pin)" `109 
F N "output_toggle" 1 81 ""
V L "pin" 1 81 "int16" `112 
F B "output_toggle" 1 81 "void(int16 pin)" `111 
F N "output_bit" 1 82 ""
V L "pin" 1 82 "int16" `114 
V L "level" 1 82 "int8" `115 
F B "output_bit" 1 82 "void(int16 pin,int8 level)" `113 
F N "output_float" 1 83 ""
V L "pin" 1 83 "int16" `117 
F B "output_float" 1 83 "void(int16 pin)" `116 
F N "output_drive" 1 84 ""
V L "pin" 1 84 "int16" `119 
F B "output_drive" 1 84 "void(int16 pin)" `118  "Constants used to identify pins in the above are:"
D G "PIN_A0" 1 88 "31744"
D G "PIN_A1" 1 89 "31745"
D G "PIN_A2" 1 90 "31746"
D G "PIN_A3" 1 91 "31747"
D G "PIN_A4" 1 92 "31748"
D G "PIN_A5" 1 93 "31749"
D G "PIN_A6" 1 94 "31750"
D G "PIN_A7" 1 95 "31751"
D G "PIN_B0" 1 97 "31752"
D G "PIN_B1" 1 98 "31753"
D G "PIN_B2" 1 99 "31754"
D G "PIN_B3" 1 100 "31755"
D G "PIN_B4" 1 101 "31756"
D G "PIN_B5" 1 102 "31757"
D G "PIN_B6" 1 103 "31758"
D G "PIN_B7" 1 104 "31759"
D G "PIN_C0" 1 106 "31760"
D G "PIN_C1" 1 107 "31761"
D G "PIN_C2" 1 108 "31762"
D G "PIN_C3" 1 109 "31763"
D G "PIN_C4" 1 110 "31764"
D G "PIN_C5" 1 111 "31765"
D G "PIN_C6" 1 112 "31766"
D G "PIN_C7" 1 113 "31767"
D G "PIN_D0" 1 115 "31768"
D G "PIN_D1" 1 116 "31769"
D G "PIN_D2" 1 117 "31770"
D G "PIN_D3" 1 118 "31771"
D G "PIN_D4" 1 119 "31772"
D G "PIN_D5" 1 120 "31773"
D G "PIN_D6" 1 121 "31774"
D G "PIN_D7" 1 122 "31775"
D G "PIN_E0" 1 124 "31776"
D G "PIN_E1" 1 125 "31777"
D G "PIN_E2" 1 126 "31778"
D G "PIN_E3" 1 127 "31779"
D G "FALSE" 1 130 "0"
D G "TRUE" 1 131 "1"
D G "BYTE" 1 133 "int8"
D G "BOOLEAN" 1 134 "int1"
D G "getc" 1 136 "getch"
D G "fgetc" 1 137 "getch"
D G "getchar" 1 138 "getch"
D G "putc" 1 139 "putchar"
D G "fputc" 1 140 "putchar"
D G "fgets" 1 141 "gets"
D G "fputs" 1 142 "puts"
c L "output_drive" 1 3 3 "FUNCTION"
F N "restart_cause" 1 147 ""
F B "restart_cause" 1 147 "int8()" `120 
F N "reset_cpu" 1 148 ""
F B "reset_cpu" 1 148 "void()" `121 
F N "sleep" 1 149 ""
F B "sleep" 1 149 "void()" `122 
F N "sleep" 1 150 ""
V L "type" 1 150 "int8" `124 
F B "sleep" 1 150 "void(int8 type)" `123  "Constants returned from RESTART_CAUSE() are:"
D G "WDT_TIMEOUT" 1 152 "7"
D G "MCLR_FROM_SLEEP" 1 153 "11"
D G "MCLR_FROM_RUN" 1 154 "15"
D G "NORMAL_POWER_UP" 1 155 "12"
D G "BROWNOUT_RESTART" 1 156 "14"
D G "WDT_FROM_SLEEP" 1 157 "3"
D G "RESET_INSTRUCTION" 1 158 "0"
D G "SLEEP_FULL" 1 161 "0" "Default"
D G "SLEEP_IDLE" 1 162 "1" "Clock and peripherals don't stop"
c L "sleep" 1 3 5 "FUNCTION"
F N "setup_timer_0" 1 169 ""
V L "mode" 1 169 "int8" `126 
F B "setup_timer_0" 1 169 "void(int8 mode)" `125 
F N "set_timer0" 1 170 ""
V L "value" 1 170 "int16" `128 
F B "set_timer0" 1 170 "void(int16 value)" `127 
F N "get_timer0" 1 171 ""
F B "get_timer0" 1 171 "int16()" `129 
F N "setup_counters" 1 172 ""
V L "mode" 1 172 "int8" `131 
V L "prescaler" 1 172 "int8" `132 
F B "setup_counters" 1 172 "void(int8 mode,int8 prescaler)" `130 
F N "set_rtcc" 1 173 ""
V L "value" 1 173 "int16" `134 
F B "set_rtcc" 1 173 "void(int16 value)" `133 
F N "get_rtcc" 1 174 ""
F B "get_rtcc" 1 174 "int16()" `135  "Constants used for SETUP_TIMER_0() are:"
D G "T0_INTERNAL" 1 176 "0"
D G "T0_EXT_L_TO_H" 1 177 "32"
D G "T0_EXT_H_TO_L" 1 178 "48"
D G "T0_DIV_1" 1 180 "8"
D G "T0_DIV_2" 1 181 "0"
D G "T0_DIV_4" 1 182 "1"
D G "T0_DIV_8" 1 183 "2"
D G "T0_DIV_16" 1 184 "3"
D G "T0_DIV_32" 1 185 "4"
D G "T0_DIV_64" 1 186 "5"
D G "T0_DIV_128" 1 187 "6"
D G "T0_DIV_256" 1 188 "7"
D G "T0_OFF" 1 190 "0x80"
D G "T0_8_BIT" 1 192 "0x40"
D G "RTCC_INTERNAL" 1 196 "0"
D G "RTCC_EXT_L_TO_H" 1 197 "32"
D G "RTCC_EXT_H_TO_L" 1 198 "48"
D G "RTCC_DIV_1" 1 199 "8"
D G "RTCC_DIV_2" 1 200 "0"
D G "RTCC_DIV_4" 1 201 "1"
D G "RTCC_DIV_8" 1 202 "2"
D G "RTCC_DIV_16" 1 203 "3"
D G "RTCC_DIV_32" 1 204 "4"
D G "RTCC_DIV_64" 1 205 "5"
D G "RTCC_DIV_128" 1 206 "6"
D G "RTCC_DIV_256" 1 207 "7"
D G "RTCC_OFF" 1 208 "0x80"
D G "RTCC_8_BIT" 1 209 "0x40"
c L "get_rtcc" 1 3 8 "FUNCTION"
F N "setup_wdt" 1 220 ""
V L "mode" 1 220 "int16" `137 
F B "setup_wdt" 1 220 "void(int16 mode)" `136 
F N "restart_wdt" 1 221 ""
F B "restart_wdt" 1 221 "void()" `138  "Constants used for SETUP_WDT() are:"
D G "WDT_ON" 1 223 "0x100"
D G "WDT_OFF" 1 224 "0"
D G "WDT_4MS" 1 226 "0x300"
D G "WDT_8MS" 1 227 "0x500"
D G "WDT_16MS" 1 228 "0x700"
D G "WDT_32MS" 1 229 "0x900"
D G "WDT_64MS" 1 230 "0xB00"
D G "WDT_128MS" 1 231 "0xD00"
D G "WDT_256MS" 1 232 "0xF00"
D G "WDT_512MS" 1 233 "0x1100"
D G "WDT_1S" 1 234 "0x1300"
D G "WDT_2S" 1 235 "0x1500"
D G "WDT_4S" 1 236 "0x1700"
D G "WDT_8S" 1 237 "0x1900"
D G "WDT_16S" 1 238 "0x1B00"
D G "WDT_32S" 1 239 "0x1D00"
D G "WDT_64S" 1 240 "0x1F00"
D G "WDT_128S" 1 241 "0x2100"
c L "restart_wdt" 1 3 3 "FUNCTION"
F N "setup_timer_1" 1 246 ""
V L "mode" 1 246 "int16" `140 
F B "setup_timer_1" 1 246 "void(int16 mode)" `139 
F N "get_timer1" 1 247 ""
F B "get_timer1" 1 247 "int16()" `141 
F N "set_timer1" 1 248 ""
V L "value" 1 248 "int16" `143 
F B "set_timer1" 1 248 "void(int16 value)" `142  "Constants used for SETUP_TIMER_1() are:"
D G "T1_DISABLED" 1 251 "0"
D G "T1_INTERNAL" 1 252 "0x07"
D G "T1_EXTERNAL" 1 253 "0x87"
D G "T1_EXTERNAL_SYNC" 1 254 "0x83"
D G "T1_FOSC" 1 255 "0x47"
D G "T1_ENABLE_SOSC" 1 257 "0x08"
D G "T1_DIV_BY_1" 1 259 "0"
D G "T1_DIV_BY_2" 1 260 "0x10"
D G "T1_DIV_BY_4" 1 261 "0x20"
D G "T1_DIV_BY_8" 1 262 "0x30"
D G "T1_GATE" 1 264 "0x8000"
D G "T1_GATE_INVERTED" 1 265 "0xC000"
D G "T1_GATE_TOGGLE" 1 266 "0xA000"
D G "T1_GATE_SINGLE" 1 267 "0x9000"
D G "T1_GATE_TIMER2" 1 268 "0x8100"
D G "T1_GATE_COMP1" 1 269 "0x8200"
D G "T1_GATE_COMP2" 1 270 "0x8300"
c L "set_timer1" 1 3 3 "FUNCTION"
F N "setup_timer_2" 1 275 ""
V L "mode" 1 275 "int8" `145 
V L "period" 1 275 "int8" `146 
V L "postscale" 1 275 "int8" `147 
F B "setup_timer_2" 1 275 "void(int8 mode,int8 period,int8 postscale)" `144 
F N "get_timer2" 1 276 ""
F B "get_timer2" 1 276 "int8()" `148 
F N "set_timer2" 1 277 ""
V L "value" 1 277 "int8" `150 
F B "set_timer2" 1 277 "void(int8 value)" `149  "Constants used for SETUP_TIMER_2() are:"
D G "T2_DISABLED" 1 279 "0"
D G "T2_DIV_BY_1" 1 280 "4"
D G "T2_DIV_BY_4" 1 281 "5"
D G "T2_DIV_BY_16" 1 282 "6"
c L "set_timer2" 1 3 3 "FUNCTION"
F N "setup_timer_3" 1 287 ""
V L "mode" 1 287 "int16" `152 
F B "setup_timer_3" 1 287 "void(int16 mode)" `151 
F N "get_timer3" 1 288 ""
F B "get_timer3" 1 288 "int16()" `153 
F N "set_timer3" 1 289 ""
V L "value" 1 289 "int16" `155 
F B "set_timer3" 1 289 "void(int16 value)" `154  "Constants used for SETUP_TIMER_3() are:"
D G "T3_DISABLED" 1 292 "0"
D G "T3_INTERNAL" 1 293 "0x07"
D G "T3_EXTERNAL" 1 294 "0x87"
D G "T3_EXTERNAL_SYNC" 1 295 "0x83"
D G "T3_FOSC" 1 296 "0x47"
D G "T3_ENABLE_SOSC" 1 298 "0x08"
D G "T3_DIV_BY_1" 1 300 "0"
D G "T3_DIV_BY_2" 1 301 "0x10"
D G "T3_DIV_BY_4" 1 302 "0x20"
D G "T3_DIV_BY_8" 1 303 "0x30"
D G "T3_GATE" 1 305 "0x8000"
D G "T3_GATE_INVERTED" 1 306 "0xC000"
D G "T3_GATE_TOGGLE" 1 307 "0xA000"
D G "T3_GATE_SINGLE" 1 308 "0x9000"
D G "T3_GATE_TIMER4" 1 309 "0x8100"
D G "T3_GATE_COMP1" 1 310 "0x8200"
D G "T3_GATE_COMP2" 1 311 "0x8300"
c L "set_timer3" 1 3 3 "FUNCTION"
F N "setup_timer_4" 1 316 ""
V L "mode" 1 316 "int16" `157 
V L "period" 1 316 "int8" `158 
V L "postscaler" 1 316 "int8" `159 
F B "setup_timer_4" 1 316 "void(int16 mode,int8 period,int8 postscaler)" `156 
F N "get_timer4" 1 317 ""
F B "get_timer4" 1 317 "int8()" `160 
F N "set_timer4" 1 318 ""
V L "value" 1 318 "int8" `162 
F B "set_timer4" 1 318 "void(int8 value)" `161  "Constants used for SETUP_TIMER_4() are:"
D G "T4_DISABLED" 1 320 "0"
D G "T4_DIV_BY_1" 1 321 "4"
D G "T4_DIV_BY_4" 1 322 "5"
D G "T4_DIV_BY_16" 1 323 "6"
c L "set_timer4" 1 3 3 "FUNCTION"
F N "setup_timer_5" 1 328 ""
V L "mode" 1 328 "int16" `164 
F B "setup_timer_5" 1 328 "void(int16 mode)" `163 
F N "get_timer5" 1 329 ""
F B "get_timer5" 1 329 "int16()" `165 
F N "set_timer5" 1 330 ""
V L "value" 1 330 "int16" `167 
F B "set_timer5" 1 330 "void(int16 value)" `166  "Constants used for SETUP_TIMER_5() are:"
D G "T5_DISABLED" 1 333 "0"
D G "T5_INTERNAL" 1 334 "0x07"
D G "T5_EXTERNAL" 1 335 "0x87"
D G "T5_EXTERNAL_SYNC" 1 336 "0x83"
D G "T5_FOSC" 1 337 "0x47"
D G "T5_LFINTRC" 1 338 "0xC7"
D G "T5_ENABLE_SOSC" 1 340 "0x08"
D G "T5_DIV_BY_1" 1 342 "0"
D G "T5_DIV_BY_2" 1 343 "0x10"
D G "T5_DIV_BY_4" 1 344 "0x20"
D G "T5_DIV_BY_8" 1 345 "0x30"
D G "T5_GATE" 1 347 "0x8000"
D G "T5_GATE_INVERTED" 1 348 "0xC000"
D G "T5_GATE_TOGGLE" 1 349 "0xA000"
D G "T5_GATE_SINGLE" 1 350 "0x9000"
D G "T5_GATE_TIMER6" 1 351 "0x8100"
D G "T5_GATE_COMP1" 1 352 "0x8200"
D G "T5_GATE_COMP2" 1 353 "0x8300"
c L "set_timer5" 1 3 3 "FUNCTION"
F N "setup_timer_6" 1 358 ""
V L "mode" 1 358 "int16" `169 
V L "period" 1 358 "int8" `170 
V L "postscaler" 1 358 "int8" `171 
F B "setup_timer_6" 1 358 "void(int16 mode,int8 period,int8 postscaler)" `168 
F N "get_timer6" 1 359 ""
F B "get_timer6" 1 359 "int8()" `172 
F N "set_timer6" 1 360 ""
V L "value" 1 360 "int8" `174 
F B "set_timer6" 1 360 "void(int8 value)" `173  "Constants used for SETUP_TIMER_6() are:"
D G "T6_DISABLED" 1 363 "0"
D G "T6_DIV_BY_1" 1 364 "4"
D G "T6_DIV_BY_4" 1 365 "5"
D G "T6_DIV_BY_16" 1 366 "6"
c L "set_timer6" 1 3 4 "FUNCTION"
F N "setup_ccp1" 1 372 ""
V L "mode" 1 372 "int32" `176 
F B "setup_ccp1" 1 372 "void(int32 mode)" `175 
F N "setup_ccp1" 1 373 ""
V L "mode" 1 373 "int32" `178 
V L "pwm" 1 373 "int8" `179 
F B "setup_ccp1" 1 373 "void(int32 mode,int8 pwm)" `177 
F N "set_pwm1_duty" 1 374 ""
V L "value" 1 374 "int8" `181 
F B "set_pwm1_duty" 1 374 "void(int8 value)" `180 
F N "set_pwm1_duty" 1 375 ""
V L "value" 1 375 "int16" `183 
F B "set_pwm1_duty" 1 375 "void(int16 value)" `182  "Constants used for SETUP_CCPx() are:"
D G "CCP_OFF" 1 377 "0"
D G "CCP_CAPTURE_FE" 1 378 "0x04"
D G "CCP_CAPTURE_RE" 1 379 "0x05"
D G "CCP_CAPTURE_DIV_4" 1 380 "0x06"
D G "CCP_CAPTURE_DIV_16" 1 381 "0x07"
D G "CCP_COMPARE_SET_ON_MATCH" 1 382 "0x08"
D G "CCP_COMPARE_CLR_ON_MATCH" 1 383 "0x09"
D G "CCP_COMPARE_INT" 1 384 "0x0A"
D G "CCP_COMPARE_INT_AND_TOGGLE" 1 385 "0x02"
D G "CCP_COMPARE_RESET_TIMER" 1 386 "0x0B"
D G "CCP_PWM" 1 387 "0x0C"
D G "CCP_PWM_PLUS_1" 1 388 "0x1c"
D G "CCP_PWM_PLUS_2" 1 389 "0x2c"
D G "CCP_PWM_PLUS_3" 1 390 "0x3c"
c L "set_pwm1_duty" 1 3 1 "FUNCTION"
D G "CCP_USE_TIMER1_AND_TIMER2" 1 402 "0x0000"
D G "CCP_USE_TIMER3_AND_TIMER4" 1 403 "0x0100"
D G "CCP_USE_TIMER5_AND_TIMER6" 1 404 "0x0200"
D G "CCP_PWM_H_H" 1 407 "0x0c"
D G "CCP_PWM_H_L" 1 408 "0x0d"
D G "CCP_PWM_L_H" 1 409 "0x0e"
D G "CCP_PWM_L_L" 1 410 "0x0f"
D G "CCP_PWM_FULL_BRIDGE" 1 412 "0x40"
D G "CCP_PWM_FULL_BRIDGE_REV" 1 413 "0xC0"
D G "CCP_PWM_HALF_BRIDGE" 1 414 "0x80"
D G "CCP_SHUTDOWN_ON_COMP1" 1 416 "0x100000"
D G "CCP_SHUTDOWN_ON_COMP2" 1 417 "0x200000"
D G "CCP_SHUTDOWN_ON_COMP" 1 418 "0x300000"
D G "CCP_SHUTDOWN_ON_INT0" 1 419 "0x400000"
D G "CCP_SHUTDOWN_ON_COMP1_INT0" 1 420 "0x500000"
D G "CCP_SHUTDOWN_ON_COMP2_INT0" 1 421 "0x600000"
D G "CCP_SHUTDOWN_ON_COMP_INT0" 1 422 "0x700000"
D G "CCP_SHUTDOWN_AC_L" 1 424 "0x000000"
D G "CCP_SHUTDOWN_AC_H" 1 425 "0x040000"
D G "CCP_SHUTDOWN_AC_F" 1 426 "0x080000"
D G "CCP_SHUTDOWN_BD_L" 1 428 "0x000000"
D G "CCP_SHUTDOWN_BD_H" 1 429 "0x010000"
D G "CCP_SHUTDOWN_BD_F" 1 430 "0x020000"
D G "CCP_SHUTDOWN_RESTART" 1 432 "0x80000000"
D G "CCP_PULSE_STEERING_A" 1 434 "0x01000000"
D G "CCP_PULSE_STEERING_B" 1 435 "0x02000000"
D G "CCP_PULSE_STEERING_C" 1 436 "0x04000000"
D G "CCP_PULSE_STEERING_D" 1 437 "0x08000000"
D G "CCP_PULSE_STEERING_SYNC" 1 438 "0x10000000"
c L "set_pwm1_duty" 1 3 1 "FUNCTION"
F N "setup_ccp2" 1 441 ""
V L "mode" 1 441 "int32" `188 
F B "setup_ccp2" 1 441 "void(int32 mode)" `187 
F N "setup_ccp2" 1 442 ""
V L "mode" 1 442 "int32" `190 
V L "pwm" 1 442 "int8" `191 
F B "setup_ccp2" 1 442 "void(int32 mode,int8 pwm)" `189 
F N "set_pwm2_duty" 1 443 ""
V L "value" 1 443 "int8" `193 
F B "set_pwm2_duty" 1 443 "void(int8 value)" `192 
F N "set_pwm2_duty" 1 444 ""
V L "value" 1 444 "int16" `195 
F B "set_pwm2_duty" 1 444 "void(int16 value)" `194 
c L "set_pwm2_duty" 1 3 1 "FUNCTION"
F N "setup_ccp3" 1 451 ""
V L "mode" 1 451 "int32" `200 
F B "setup_ccp3" 1 451 "void(int32 mode)" `199 
F N "setup_ccp3" 1 452 ""
V L "mode" 1 452 "int32" `202 
V L "pwm" 1 452 "int8" `203 
F B "setup_ccp3" 1 452 "void(int32 mode,int8 pwm)" `201 
F N "set_pwm3_duty" 1 453 ""
V L "value" 1 453 "int8" `205 
F B "set_pwm3_duty" 1 453 "void(int8 value)" `204 
F N "set_pwm3_duty" 1 454 ""
V L "value" 1 454 "int16" `207 
F B "set_pwm3_duty" 1 454 "void(int16 value)" `206 
c L "set_pwm3_duty" 1 3 1 "FUNCTION"
F N "setup_ccp4" 1 460 ""
V L "mode" 1 460 "int32" `212 
F B "setup_ccp4" 1 460 "void(int32 mode)" `211 
F N "setup_ccp4" 1 461 ""
V L "mode" 1 461 "int32" `214 
V L "pwm" 1 461 "int8" `215 
F B "setup_ccp4" 1 461 "void(int32 mode,int8 pwm)" `213 
F N "set_pwm4_duty" 1 462 ""
V L "value" 1 462 "int8" `217 
F B "set_pwm4_duty" 1 462 "void(int8 value)" `216 
F N "set_pwm4_duty" 1 463 ""
V L "value" 1 463 "int16" `219 
F B "set_pwm4_duty" 1 463 "void(int16 value)" `218 
c L "set_pwm4_duty" 1 3 1 "FUNCTION"
F N "setup_ccp5" 1 469 ""
V L "mode" 1 469 "int32" `224 
F B "setup_ccp5" 1 469 "void(int32 mode)" `223 
F N "setup_ccp5" 1 470 ""
V L "mode" 1 470 "int32" `226 
V L "pwm" 1 470 "int8" `227 
F B "setup_ccp5" 1 470 "void(int32 mode,int8 pwm)" `225 
F N "set_pwm5_duty" 1 471 ""
V L "value" 1 471 "int8" `229 
F B "set_pwm5_duty" 1 471 "void(int8 value)" `228 
F N "set_pwm5_duty" 1 472 ""
V L "value" 1 472 "int16" `231 
F B "set_pwm5_duty" 1 472 "void(int16 value)" `230 
c L "set_pwm5_duty" 1 3 3 "FUNCTION"
F N "setup_spi" 1 480 ""
V L "mode" 1 480 "int32" `236 
F B "setup_spi" 1 480 "void(int32 mode)" `235 
F N "spi_write" 1 481 ""
V L "value" 1 481 "int8" `238 
F B "spi_write" 1 481 "void(int8 value)" `237 
F N "spi_write" 1 482 ""
V L "wait" 1 482 "int8" `240 
V L "value" 1 482 "int8" `241 
F B "spi_write" 1 482 "void(int8 wait,int8 value)" `239 
F N "spi_read" 1 483 ""
F B "spi_read" 1 483 "int8()" `242 
F N "spi_read" 1 484 ""
V L "value" 1 484 "int8" `244 
F B "spi_read" 1 484 "int8(int8 value)" `243 
F N "spi_data_is_in" 1 485 ""
F B "spi_data_is_in" 1 485 "int8()" `245 
F N "setup_spi2" 1 486 ""
V L "mode" 1 486 "int32" `247 
F B "setup_spi2" 1 486 "void(int32 mode)" `246 
F N "spi_write2" 1 487 ""
V L "value" 1 487 "int8" `249 
F B "spi_write2" 1 487 "void(int8 value)" `248 
F N "spi_read2" 1 488 ""
F B "spi_read2" 1 488 "int8()" `250 
F N "spi_read2" 1 489 ""
V L "value" 1 489 "int8" `252 
F B "spi_read2" 1 489 "int8(int8 value)" `251 
F N "spi_data_is_in2" 1 490 ""
F B "spi_data_is_in2" 1 490 "int8()" `253  "Constants used in SETUP_SPI() are:"
D G "SPI_DISABLED" 1 492 "0x00"
D G "SPI_MASTER" 1 493 "0x20"
D G "SPI_SLAVE" 1 494 "0x24"
D G "SPI_SCK_IDLE_HIGH" 1 495 "0x10"
D G "SPI_SCK_IDLE_LOW" 1 496 "0x00"
D G "SPI_CLK_DIV_4" 1 497 "0x00"
D G "SPI_CLK_DIV_16" 1 498 "0x01"
D G "SPI_CLK_DIV_64" 1 499 "0x02"
D G "SPI_CLK_T2" 1 500 "0x03"
D G "SPI_SS_DISABLED" 1 501 "0x01"
D G "SPI_XMIT_L_TO_H" 1 504 "0x4000"
D G "SPI_XMIT_H_TO_L" 1 505 "0x0000"
D G "SPI_SAMPLE_AT_MIDDLE" 1 507 "0x0000"
D G "SPI_SAMPLE_AT_END" 1 508 "0x8000"
D G "SPI_L_TO_H" 1 511 "SPI_SCK_IDLE_LOW"
D G "SPI_H_TO_L" 1 512 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in2" 1 3 2 "FUNCTION"
F N "setup_uart" 1 516 ""
V L "baud" 1 516 "int32" `255 
F B "setup_uart" 1 516 "void(int32 baud)" `254 
F N "setup_uart" 1 517 ""
V L "baud" 1 517 "int32" `257 
V L "stream" 1 517 "int8" `258 
F B "setup_uart" 1 517 "void(int32 baud,int8 stream)" `256 
F N "setup_uart" 1 518 ""
V L "baud" 1 518 "int32" `260 
V L "stream" 1 518 "int8" `261 
V L "clock" 1 518 "int32" `262 
F B "setup_uart" 1 518 "void(int32 baud,int8 stream,int32 clock)" `259 
F N "set_uart_speed" 1 519 ""
V L "baud" 1 519 "int32" `264 
F B "set_uart_speed" 1 519 "void(int32 baud)" `263 
F N "set_uart_speed" 1 520 ""
V L "baud" 1 520 "int32" `266 
V L "stream" 1 520 "int8" `267 
F B "set_uart_speed" 1 520 "void(int32 baud,int8 stream)" `265 
F N "set_uart_speed" 1 521 ""
V L "baud" 1 521 "int32" `269 
V L "stream" 1 521 "int8" `270 
V L "clock" 1 521 "int32" `271 
F B "set_uart_speed" 1 521 "void(int32 baud,int8 stream,int32 clock)" `268  "Constants used in setup_uart() are:"
D G "UART_ADDRESS" 1 525 "2"
D G "UART_DATA" 1 526 "4"
D G "UART_AUTODETECT" 1 527 "8"
D G "UART_AUTODETECT_NOWAIT" 1 528 "9"
D G "UART_WAKEUP_ON_RDA" 1 529 "10"
D G "UART_SEND_BREAK" 1 530 "13"
c L "set_uart_speed" 1 3 3 "FUNCTION"
F N "setup_comparator" 1 535 ""
V L "mode" 1 535 "int32" `273 
F B "setup_comparator" 1 535 "void(int32 mode)" `272  "Constants used in setup_comparator() are:"
D G "NC_NC_NC_NC" 1 538 "0x404"
D G "NC_NC" 1 539 "0x404"
D G "CP1_A0_A3" 1 542 "0x000080"
D G "CP1_A1_A3" 1 543 "0x000081"
D G "CP1_B3_A3" 1 544 "0x000082"
D G "CP1_B1_A3" 1 545 "0x000083"
D G "CP1_A0_DAC" 1 546 "0x000084"
D G "CP1_A1_DAC" 1 547 "0x000085"
D G "CP1_B3_DAC" 1 548 "0x000086"
D G "CP1_B1_DAC" 1 549 "0x000087"
D G "CP1_A0_FVR" 1 550 "0x200084"
D G "CP1_A1_FVR" 1 551 "0x200085"
D G "CP1_B3_FVR" 1 552 "0x200086"
D G "CP1_B1_FVR" 1 553 "0x200087"
D G "CP1_OUT_ON_A4" 1 555 "0x000020"
D G "CP1_INVERT" 1 556 "0x000010"
D G "CP1_FAST" 1 557 "0x000008"
D G "CP1_HYST" 1 558 "0x080000"
D G "CP1_SYNC" 1 559 "0x020000"
D G "CP2_A0_A2" 1 562 "0x008000"
D G "CP2_A1_A2" 1 563 "0x008100"
D G "CP2_B3_A2" 1 564 "0x008200"
D G "CP2_B1_A2" 1 565 "0x008300"
D G "CP2_A0_DAC" 1 566 "0x008400"
D G "CP2_A1_DAC" 1 567 "0x008500"
D G "CP2_B3_DAC" 1 568 "0x008600"
D G "CP2_B1_DAC" 1 569 "0x008700"
D G "CP2_A0_FVR" 1 570 "0x108400"
D G "CP2_A1_FVR" 1 571 "0x108500"
D G "CP2_B3_FVR" 1 572 "0x108600"
D G "CP2_B1_FVR" 1 573 "0x108700"
D G "CP2_OUT_ON_A5" 1 575 "0x002000"
D G "CP2_INVERT" 1 576 "0x001000"
D G "CP2_FAST" 1 577 "0x000800"
D G "CP2_HYST" 1 578 "0x040000"
D G "CP2_SYNC" 1 579 "0x010000"
c L "setup_comparator" 1 3 2 "FUNCTION"
F N "setup_vref" 1 586 ""
V L "mode" 1 586 "int8" `277 
F B "setup_vref" 1 586 "void(int8 mode)" `276  "Constants used in setup_vref() are:"
D G "VREF_OFF" 1 588 "0"
D G "VREF_1v024" 1 589 "0x90"
D G "VREF_2v048" 1 590 "0xA0"
D G "VREF_4v096" 1 591 "0xB0"
c L "setup_vref" 1 3 2 "FUNCTION"
F N "setup_low_volt_detect" 1 595 ""
V L "mode" 1 595 "int8" `279 
F B "setup_low_volt_detect" 1 595 "void(int8 mode)" `278  "Constants used in setup_low_volt_detect() are:"
D G "LVD_LVDIN" 1 597 "0x1F"
D G "LVD_47" 1 598 "0x1E"
D G "LVD_43" 1 599 "0x1D"
D G "LVD_41" 1 600 "0x1C"
D G "LVD_38" 1 601 "0x1B"
D G "LVD_36" 1 602 "0x1A"
D G "LVD_34" 1 603 "0x19"
D G "LVD_32" 1 604 "0x18"
D G "LVD_29" 1 605 "0x17"
D G "LVD_28" 1 606 "0x16"
D G "LVD_27" 1 607 "0x15"
D G "LVD_25" 1 608 "0x14"
D G "LVD_24" 1 609 "0x13"
D G "LVD_22" 1 610 "0x12"
D G "LVD_20" 1 611 "0x11"
D G "LVD_18" 1 612 "0x10"
D G "LVD_TRIGGER_BELOW" 1 614 "0"
D G "LVD_TRIGGER_ABOVE" 1 615 "0x80"
c L "setup_low_volt_detect" 1 3 3 "FUNCTION"
F N "setup_dac" 1 620 ""
V L "mode" 1 620 "int8" `281 
F B "setup_dac" 1 620 "void(int8 mode)" `280 
F N "dac_write" 1 621 ""
V L "value" 1 621 "int8" `283 
F B "dac_write" 1 621 "void(int8 value)" `282  "Constants used in SETUP_DAC() are:"
D G "DAC_OFF" 1 623 "0"
D G "DAC_VSS_VDD" 1 624 "0x80"
D G "DAC_VREF_VDD" 1 625 "0x81"
D G "DAC_VSS_VREF" 1 626 "0x84"
D G "DAC_VREF_VREF" 1 627 "0x85"
D G "DAC_VSS_FVR" 1 628 "0x88"
D G "DAC_VREF_FVR" 1 629 "0x89"
D G "DAC_OUTPUT" 1 631 "0x20"
D G "DAC_LVP_POS" 1 632 "0x40"
D G "DAC_LVP_NEG" 1 633 "0             F175""
c L "dac_write" 1 3 3 "FUNCTION"
F N "disable_peripheral" 1 639 ""
V L "pmd_reg" 1 639 "int8" `285 
V L "value" 1 639 "int8" `286 
F B "disable_peripheral" 1 639 "void(int8 pmd_reg,int8 value)" `284 
F N "enable_peripheral" 1 640 ""
V L "pmd_reg" 1 640 "int8" `288 
V L "value" 1 640 "int8" `289 
F B "enable_peripheral" 1 640 "void(int8 pmd_reg,int8 value)" `287  "Constants used in disable_peripheral() and enable_peripheral() second parameter are:"
D G "PMD_TIMER1" 1 643 "0x01"
D G "PMD_TIMER2" 1 644 "0x02"
D G "PMD_TIMER3" 1 645 "0x04"
D G "PMD_TIMER4" 1 646 "0x08"
D G "PMD_TIMER5" 1 647 "0x10"
D G "PMD_TIMER6" 1 648 "0x20"
D G "PMD_UART1" 1 649 "0x40"
D G "PMD_UART2" 1 650 "0x80"
D G "PMD_CCP1" 1 652 "0x01"
D G "PMD_CCP2" 1 653 "0x02"
D G "PMD_CCP3" 1 654 "0x04"
D G "PMD_CCP4" 1 655 "0x08"
D G "PMD_CCP5" 1 656 "0x10"
D G "PMD_SSP1" 1 657 "0x40"
D G "PMD_SSP2" 1 658 "0x80"
D G "PMD_ADC" 1 660 "0x01"
D G "PMD_COMP1" 1 661 "0x02"
D G "PMD_COMP2" 1 662 "0x04"
D G "PMD_CTMU" 1 663 "0x08"
c L "enable_peripheral" 1 3 2 "FUNCTION"
F N "setup_oscillator" 1 668 ""
V L "mode" 1 668 "int16" `291 
F B "setup_oscillator" 1 668 "int8(int16 mode)" `290 
F N "setup_oscillator" 1 669 ""
V L "mode" 1 669 "int16" `293 
V L "tune" 1 669 "sint8" `294 
F B "setup_oscillator" 1 669 "int8(int16 mode,sint8 tune)" `292  "Constants used in setup_oscillator() are:"
D G "OSC_PLL_ON" 1 671 "0x4000"
D G "OSC_PLL_OFF" 1 672 "0"
D G "OSC_31250" 1 673 "0x8000"
D G "OSC_31KHZ" 1 674 "0x00"
D G "OSC_250KHZ" 1 675 "0x10"
D G "OSC_500KHZ" 1 676 "0x20"
D G "OSC_1MHZ" 1 677 "0x30"
D G "OSC_2MHZ" 1 678 "0x40"
D G "OSC_4MHZ" 1 679 "0x50"
D G "OSC_8MHZ" 1 680 "0x60"
D G "OSC_16MHZ" 1 681 "0x70"
D G "OSC_32MHZ" 1 682 "0x4060"
D G "OSC_64MHZ" 1 683 "0x4070"
D G "OSC_TIMER1" 1 685 "1"
D G "OSC_INTRC" 1 686 "2"
D G "OSC_NORMAL" 1 687 "0"
D G "OSC_IDLE_MODE" 1 689 "0x80"
D G "OSC_STATE_STABLE" 1 693 "4"
D G "OSC_STATE_EXT_RUNNING" 1 694 "8"
c L "setup_oscillator" 1 3 4 "FUNCTION"
F N "setup_adc" 1 701 ""
V L "mode" 1 701 "int16" `296 
F B "setup_adc" 1 701 "void(int16 mode)" `295 
F N "read_adc" 1 702 ""
F B "read_adc" 1 702 "int8()" `297 
F N "read_adc" 1 703 ""
V L "mode" 1 703 "int8" `299 
F B "read_adc" 1 703 "int8(int8 mode)" `298 
F N "read_adc" 1 704 ""
f G "read_adc" 1 704 "int16()" `300 
F N "read_adc" 1 705 ""
V L "mode" 1 705 "int8" `301 
f G "read_adc" 1 705 "int16(int8 mode)" `300 
F N "adc_done" 1 706 ""
F B "adc_done" 1 706 "int8(int8 mode)" `300  "Constants used for SETUP_ADC() are:"
D G "ADC_OFF" 1 708 "0" "ADC Off"
D G "ADC_CLOCK_DIV_2" 1 709 "0x100"
D G "ADC_CLOCK_DIV_4" 1 710 "0x04"
D G "ADC_CLOCK_DIV_8" 1 711 "0x01"
D G "ADC_CLOCK_DIV_16" 1 712 "0x05"
D G "ADC_CLOCK_DIV_32" 1 713 "0x02"
D G "ADC_CLOCK_DIV_64" 1 714 "0x06"
D G "ADC_CLOCK_INTERNAL" 1 715 "0x07" "Internal 2-6us"
D G "ADC_TAD_MUL_0" 1 717 "0x00"
D G "ADC_TAD_MUL_2" 1 718 "0x08"
D G "ADC_TAD_MUL_4" 1 719 "0x10"
D G "ADC_TAD_MUL_6" 1 720 "0x18"
D G "ADC_TAD_MUL_8" 1 721 "0x20"
D G "ADC_TAD_MUL_12" 1 722 "0x28"
D G "ADC_TAD_MUL_16" 1 723 "0x30"
D G "ADC_TAD_MUL_20" 1 724 "0x38"
c L "adc_done" 1 3 1 "FUNCTION"
F N "setup_adc_ports" 1 727 ""
V L "pins" 1 727 "int32" `302 
F B "setup_adc_ports" 1 727 "void(int32 pins)" `301 
F N "setup_adc_ports" 1 728 ""
V L "pins" 1 728 "int32" `304 
V L "reference" 1 728 "int32" `305 
F B "setup_adc_ports" 1 728 "void(int32 pins,int32 reference)" `303 
F N "set_analog_pins" 1 729 ""
V L "pin" 1 729 "int8" `307 
F B "set_analog_pins" 1 729 "void(int8 pin,*int8 _VA_LIST)" `306 
F N "setup_adc_reference" 1 730 ""
V L "reference" 1 730 "int32" `310 
F B "setup_adc_reference" 1 730 "void(int32 reference)" `309 
F N "set_adc_channel" 1 731 ""
V L "channel" 1 731 "int8" `312 
F B "set_adc_channel" 1 731 "void(int8 channel)" `311  "Constants used in SETUP_ADC_PORTS() are:"
D G "sAN0" 1 735 "0x00800000" "| A0"
D G "sAN1" 1 736 "0x01000000" "| A1"
D G "sAN2" 1 737 "0x02000000" "| A2"
D G "sAN3" 1 738 "0x04000000" "| A3"
D G "sAN4" 1 739 "0x08000000" "| A5"
D G "sAN5" 1 740 "0x00100000" "| E0"
D G "sAN6" 1 741 "0x00200000" "| E1"
D G "sAN7" 1 742 "0x00400000" "| E2"
D G "sAN8" 1 743 "0x00010000" "| B2"
D G "sAN9" 1 744 "0x00020000" "| B3"
D G "sAN10" 1 745 "0x00008000" "| B1"
D G "sAN11" 1 746 "0x00040000" "| B4"
D G "sAN12" 1 747 "0x00004000" "| B0"
D G "sAN13" 1 748 "0x00080000" "| B5"
D G "sAN14" 1 749 "0x00000100" "| C2"
D G "sAN15" 1 750 "0x00000200" "| C3"
D G "sAN16" 1 751 "0x00000400" "| C4"
D G "sAN17" 1 752 "0x00000800" "| C5"
D G "sAN18" 1 753 "0x00001000" "| C6"
D G "sAN19" 1 754 "0x00002000" "| C7"
D G "sAN20" 1 755 "0x00000001" "| D0"
D G "sAN21" 1 756 "0x00000002" "| D1"
D G "sAN22" 1 757 "0x00000004" "| D2"
D G "sAN23" 1 758 "0x00000008" "| D3"
D G "sAN24" 1 759 "0x00000010" "| D4"
D G "sAN25" 1 760 "0x00000020" "| D5"
D G "sAN26" 1 761 "0x00000040" "| D6"
D G "sAN27" 1 762 "0x00000080" "| D7"
D G "NO_ANALOGS" 1 763 "0" "None"
D G "ALL_ANALOG" 1 764 "0x0FFFFFFF" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4 B0 B5 C2 C3 C4 C5 C6 C7 D0 D1 D2 D3 D4 D5 D6 D7"
D G "VSS_VDD" 1 767 "0x00000000" "| Range 0-Vdd"
D G "VSS_VREF" 1 768 "0x40000000" "| Range 0-VrefH"
D G "VSS_FVR" 1 769 "0x80000000" "| Range 0-Fvr BUF2"
D G "VREF_VDD" 1 770 "0x10000000" "| Range VrefL-Vdd"
D G "VREF_VREF" 1 771 "0x50000000" "| Range VrefL-VrefH"
D G "VREF_FVR" 1 772 "0x90000000" "| Range VrefL-Fvr BUF2"
D G "CTMU_CHANNEL" 1 776 "0x1D"
D G "DAC_CHANNEL" 1 777 "0x1E"
D G "FVR_CHANNEL" 1 778 "0x1F"
D G "ADC_START_AND_READ" 1 781 "7" "This is the default if nothing is specified"
D G "ADC_START_ONLY" 1 782 "1"
D G "ADC_READ_ONLY" 1 783 "6"
c L "set_adc_channel" 1 3 3 "FUNCTION"
F N "abs" 1 789 ""
V L "x" 1 789 "sint8" `314 
F B "abs" 1 789 "sint8(sint8 x)" `313 
F N "abs" 1 790 ""
V L "x" 1 790 "sint16" `316 
F B "abs" 1 790 "sint16(sint16 x)" `315 
F N "abs" 1 791 ""
V L "x" 1 791 "sint32" `318 
F B "abs" 1 791 "sint32(sint32 x)" `317 
F N "abs" 1 792 ""
V L "x" 1 792 "float" `320 
F B "abs" 1 792 "float(float x)" `319 
F N "_mul" 1 793 ""
V L "??65535" 1 793 "int8" `322 
V L "??65535" 1 793 "int8" `323 
F B "_mul" 1 793 "int16(int8 ,int8 )" `321 
F N "_mul" 1 794 ""
V L "??65535" 1 794 "sint8" `325 
V L "??65535" 1 794 "sint8" `326 
F B "_mul" 1 794 "sint16(sint8 ,sint8 )" `324 
F N "_mul" 1 795 ""
V L "??65535" 1 795 "int16" `328 
V L "??65535" 1 795 "int16" `329 
F B "_mul" 1 795 "int32(int16 ,int16 )" `327 
F N "_mul" 1 796 ""
V L "??65535" 1 796 "sint16" `331 
V L "??65535" 1 796 "sint16" `332 
F B "_mul" 1 796 "sint32(sint16 ,sint16 )" `330  "Memory Manipulation Prototypes:"
F N "read_bank" 1 799 ""
V L "bank" 1 799 "int8" `334 
V L "offset" 1 799 "int8" `335 
F B "read_bank" 1 799 "int8(int8 bank,int8 offset)" `333 
F N "write_bank" 1 800 ""
V L "bank" 1 800 "int8" `337 
V L "offset" 1 800 "int8" `338 
V L "value" 1 800 "int8" `339 
F B "write_bank" 1 800 "void(int8 bank,int8 offset,int8 value)" `336 
F N "strcpy" 1 801 ""
V L "dest" 1 801 "*int8" `341 
V L "src" 1 801 "*int8" `342 
F B "strcpy" 1 801 "void(*int8 dest,*int8 src)" `340 
F N "memset" 1 802 ""
V L "destination" 1 802 "*int8" `344 
V L "value" 1 802 "int8" `345 
V L "num" 1 802 "int16" `346 
F B "memset" 1 802 "void(*int8 destination,int8 value,int16 num)" `343 
F N "memcpy" 1 803 ""
V L "destination" 1 803 "*int8" `348 
V L "source" 1 803 "*int8" `349 
V L "num" 1 803 "int16" `350 
F B "memcpy" 1 803 "void(*int8 destination,*int8 source,int16 num)" `347  "String Prototypes:"
F N "toupper" 1 806 ""
V L "cvalue" 1 806 "int8" `352 
F B "toupper" 1 806 "int8(int8 cvalue)" `351 
F N "tolower" 1 807 ""
V L "cvalue" 1 807 "int8" `354 
F B "tolower" 1 807 "int8(int8 cvalue)" `353 
F N "sprintf" 1 808 ""
V L "string" 1 808 "*int8" `356 
V L "cstring" 1 808 "*int8" `357 
F B "sprintf" 1 808 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `355  "Data Manipulators Prototypes:"
F N "shift_left" 1 811 ""
V L "address" 1 811 "*int8" `360 
V L "bytes" 1 811 "int8" `361 
V L "value" 1 811 "int8" `362 
F B "shift_left" 1 811 "int8(*int8 address,int8 bytes,int8 value)" `359 
F N "shift_right" 1 812 ""
V L "address" 1 812 "*int8" `364 
V L "bytes" 1 812 "int8" `365 
V L "value" 1 812 "int8" `366 
F B "shift_right" 1 812 "int8(*int8 address,int8 bytes,int8 value)" `363 
F N "rotate_left" 1 813 ""
V L "address" 1 813 "*int8" `368 
V L "bytes" 1 813 "int8" `369 
F B "rotate_left" 1 813 "void(*int8 address,int8 bytes)" `367 
F N "rotate_right" 1 814 ""
V L "address" 1 814 "*int8" `371 
V L "bytes" 1 814 "int8" `372 
F B "rotate_right" 1 814 "void(*int8 address,int8 bytes)" `370 
F N "swap" 1 815 ""
V L "value" 1 815 "int8" `374 
F B "swap" 1 815 "void(int8 value)" `373 
F N "make8" 1 816 ""
V L "var" 1 816 "int16" `376 
V L "offset" 1 816 "int8" `377 
F B "make8" 1 816 "int8(int16 var,int8 offset)" `375 
F N "make8" 1 817 ""
V L "var" 1 817 "int32" `379 
V L "offset" 1 817 "int8" `380 
F B "make8" 1 817 "int8(int32 var,int8 offset)" `378 
F N "make16" 1 818 ""
V L "varhigh" 1 818 "int8" `382 
V L "varlow" 1 818 "int8" `383 
F B "make16" 1 818 "int16(int8 varhigh,int8 varlow)" `381 
F N "make32" 1 819 ""
V L "var1" 1 819 "int16" `385 
F B "make32" 1 819 "int32(int16 var1)" `384 
F N "make32" 1 820 ""
V L "var1" 1 820 "int16" `387 
V L "var2" 1 820 "int16" `388 
F B "make32" 1 820 "int32(int16 var1,int16 var2)" `386 
F N "make32" 1 821 ""
V L "var1" 1 821 "int16" `390 
V L "var2" 1 821 "int8" `391 
F B "make32" 1 821 "int32(int16 var1,int8 var2)" `389 
F N "make32" 1 822 ""
V L "var1" 1 822 "int16" `393 
V L "var2" 1 822 "int8" `394 
V L "var3" 1 822 "int8" `395 
F B "make32" 1 822 "int32(int16 var1,int8 var2,int8 var3)" `392 
F N "make32" 1 823 ""
V L "var1" 1 823 "int8" `397 
F B "make32" 1 823 "int32(int8 var1)" `396 
F N "make32" 1 824 ""
V L "var1" 1 824 "int8" `399 
V L "var2" 1 824 "int8" `400 
F B "make32" 1 824 "int32(int8 var1,int8 var2)" `398 
F N "make32" 1 825 ""
V L "var1" 1 825 "int8" `402 
V L "var2" 1 825 "int8" `403 
V L "var3" 1 825 "int8" `404 
F B "make32" 1 825 "int32(int8 var1,int8 var2,int8 var3)" `401 
F N "make32" 1 826 ""
V L "var1" 1 826 "int8" `406 
V L "var2" 1 826 "int8" `407 
V L "var3" 1 826 "int8" `408 
V L "var4" 1 826 "int8" `409 
F B "make32" 1 826 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `405 
F N "make32" 1 827 ""
V L "var1" 1 827 "int8" `411 
V L "var2" 1 827 "int16" `412 
F B "make32" 1 827 "int32(int8 var1,int16 var2)" `410 
F N "make32" 1 828 ""
V L "var1" 1 828 "int8" `414 
V L "var2" 1 828 "int16" `415 
V L "var3" 1 828 "int8" `416 
F B "make32" 1 828 "int32(int8 var1,int16 var2,int8 var3)" `413 
F N "make32" 1 829 ""
V L "var1" 1 829 "int8" `418 
V L "var2" 1 829 "int8" `419 
V L "var3" 1 829 "int16" `420 
F B "make32" 1 829 "int32(int8 var1,int8 var2,int16 var3)" `417 
F N "bit_set" 1 830 ""
V L "var" 1 830 "int8" `422 
V L "bit" 1 830 "int8" `423 
F B "bit_set" 1 830 "void(int8 var,int8 bit)" `421 
F N "bit_set" 1 831 ""
V L "var" 1 831 "int16" `425 
V L "bit" 1 831 "int8" `426 
F B "bit_set" 1 831 "void(int16 var,int8 bit)" `424 
F N "bit_set" 1 832 ""
V L "var" 1 832 "int32" `428 
V L "bit" 1 832 "int8" `429 
F B "bit_set" 1 832 "void(int32 var,int8 bit)" `427 
F N "bit_clear" 1 833 ""
V L "var" 1 833 "int8" `431 
V L "bit" 1 833 "int8" `432 
F B "bit_clear" 1 833 "void(int8 var,int8 bit)" `430 
F N "bit_clear" 1 834 ""
V L "var" 1 834 "int16" `434 
V L "bit" 1 834 "int8" `435 
F B "bit_clear" 1 834 "void(int16 var,int8 bit)" `433 
F N "bit_clear" 1 835 ""
V L "var" 1 835 "int32" `437 
V L "bit" 1 835 "int8" `438 
F B "bit_clear" 1 835 "void(int32 var,int8 bit)" `436 
F N "bit_test" 1 836 ""
V L "var" 1 836 "int8" `440 
V L "bit" 1 836 "int8" `441 
F B "bit_test" 1 836 "int8(int8 var,int8 bit)" `439 
F N "bit_test" 1 837 ""
V L "var" 1 837 "int16" `443 
V L "bit" 1 837 "int8" `444 
F B "bit_test" 1 837 "int8(int16 var,int8 bit)" `442 
F N "bit_test" 1 838 ""
V L "var" 1 838 "int32" `446 
V L "bit" 1 838 "int8" `447 
F B "bit_test" 1 838 "int8(int32 var,int8 bit)" `445  "#use delay() Prototypes:"
F N "delay_cycles" 1 841 ""
V L "count" 1 841 "int8" `449 
F B "delay_cycles" 1 841 "void(int8 count)" `448 
F N "delay_ms" 1 842 ""
V L "time" 1 842 "int16" `451 
F B "delay_ms" 1 842 "void(int16 time)" `450 
F N "delay_us" 1 843 ""
V L "time" 1 843 "int16" `453 
F B "delay_us" 1 843 "void(int16 time)" `452  "#use rs232() Prototypes:"
F N "putchar" 1 846 ""
V L "cdata" 1 846 "int8" `455 
F B "putchar" 1 846 "void(int8 cdata)" `454 
F N "putchar" 1 847 ""
V L "cdata" 1 847 "int8" `457 
V L "stream" 1 847 "int8" `458 
F B "putchar" 1 847 "void(int8 cdata,int8 stream)" `456 
F N "puts" 1 848 ""
V L "string" 1 848 "*int8" `460 
F B "puts" 1 848 "void(*int8 string)" `459 
F N "puts" 1 849 ""
V L "string" 1 849 "*int8" `462 
V L "stream" 1 849 "int8" `463 
F B "puts" 1 849 "void(*int8 string,int8 stream)" `461 
F N "getch" 1 850 ""
F B "getch" 1 850 "int8()" `464 
F N "getch" 1 851 ""
V L "stream" 1 851 "int8" `466 
F B "getch" 1 851 "int8(int8 stream)" `465 
F N "gets" 1 852 ""
V L "string" 1 852 "*int8" `468 
F B "gets" 1 852 "void(*int8 string)" `467 
F N "gets" 1 853 ""
V L "string" 1 853 "*int8" `470 
V L "stream" 1 853 "int8" `471 
F B "gets" 1 853 "void(*int8 string,int8 stream)" `469 
F N "kbhit" 1 854 ""
F B "kbhit" 1 854 "int8()" `472 
F N "kbhit" 1 855 ""
V L "stream" 1 855 "int8" `474 
F B "kbhit" 1 855 "int8(int8 stream)" `473 
F N "printf" 1 856 ""
V L "string" 1 856 "*int8" `476 
F B "printf" 1 856 "void(*int8 string,*int8 _VA_LIST)" `475 
F N "fprintf" 1 857 ""
V L "stream" 1 857 "int8" `479 
V L "string" 1 857 "*int8" `480 
F B "fprintf" 1 857 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `478 
F N "putc_send" 1 858 ""
F B "putc_send" 1 858 "void()" `482 
F N "fputc_send" 1 859 ""
V L "stream" 1 859 "int8" `484 
F B "fputc_send" 1 859 "void(int8 stream)" `483 
F N "rcv_buffer_full" 1 860 ""
F B "rcv_buffer_full" 1 860 "int8()" `485 
F N "rcv_buffer_full" 1 861 ""
V L "stream" 1 861 "int8" `487 
F B "rcv_buffer_full" 1 861 "int8(int8 stream)" `486 
F N "rcv_buffer_bytes" 1 862 ""
F B "rcv_buffer_bytes" 1 862 "int16()" `488 
F N "rcv_buffer_bytes" 1 863 ""
V L "stream" 1 863 "int8" `490 
F B "rcv_buffer_bytes" 1 863 "int16(int8 stream)" `489 
F N "tx_buffer_full" 1 864 ""
F B "tx_buffer_full" 1 864 "int8()" `491 
F N "tx_buffer_full" 1 865 ""
V L "stream" 1 865 "int8" `493 
F B "tx_buffer_full" 1 865 "int8(int8 stream)" `492 
F N "tx_buffer_bytes" 1 866 ""
F B "tx_buffer_bytes" 1 866 "int16()" `494 
F N "tx_buffer_bytes" 1 867 ""
V L "stream" 1 867 "int8" `496 
F B "tx_buffer_bytes" 1 867 "int16(int8 stream)" `495 
F N "linbus_header" 1 868 ""
V L "identifier" 1 868 "int8" `498 
F B "linbus_header" 1 868 "int8(int8 identifier)" `497 
F N "linbus_header" 1 869 ""
V L "stream" 1 869 "int8" `500 
V L "identifier" 1 869 "int8" `501 
F B "linbus_header" 1 869 "int8(int8 stream,int8 identifier)" `499 
F N "linbus_header_hit" 1 870 ""
F B "linbus_header_hit" 1 870 "int8()" `502 
F N "linbus_header_hit" 1 871 ""
V L "stream" 1 871 "int8" `504 
F B "linbus_header_hit" 1 871 "int8(int8 stream)" `503 
F N "linbus_header_get" 1 872 ""
F B "linbus_header_get" 1 872 "int8()" `505 
F N "linbus_header_get" 1 873 ""
V L "stream" 1 873 "int8" `507 
F B "linbus_header_get" 1 873 "int8(int8 stream)" `506 
F N "linbus_rx_response" 1 874 ""
V L "DataPtr" 1 874 "*int8" `509 
V L "count" 1 874 "int8" `510 
F B "linbus_rx_response" 1 874 "int8(*int8 DataPtr,int8 count)" `508 
F N "linbus_rx_response" 1 875 ""
V L "stream" 1 875 "int8" `512 
V L "DataPtr" 1 875 "*int8" `513 
V L "count" 1 875 "int8" `514 
F B "linbus_rx_response" 1 875 "int8(int8 stream,*int8 DataPtr,int8 count)" `511 
F N "linbus_tx_response" 1 876 ""
V L "DataPtr" 1 876 "*int8" `516 
V L "count" 1 876 "int8" `517 
F B "linbus_tx_response" 1 876 "void(*int8 DataPtr,int8 count)" `515 
F N "linbus_tx_response" 1 877 ""
V L "stream" 1 877 "int8" `519 
V L "DataPtr" 1 877 "*int8" `520 
V L "count" 1 877 "int8" `521 
F B "linbus_tx_response" 1 877 "void(int8 stream,*int8 DataPtr,int8 count)" `518 
F N "linbus_checksum_type" 1 878 ""
V L "type" 1 878 "int8" `523 
F B "linbus_checksum_type" 1 878 "void(int8 type)" `522 
F N "linbus_checksum_type" 1 879 ""
V L "stream" 1 879 "int8" `525 
V L "type" 1 879 "int8" `526 
F B "linbus_checksum_type" 1 879 "void(int8 stream,int8 type)" `524  "#use i2c() Prototypes:"
F N "i2c_read" 1 882 ""
F B "i2c_read" 1 882 "int8()" `527 
F N "i2c_read" 1 883 ""
V L "ack" 1 883 "int8" `529 
F B "i2c_read" 1 883 "int8(int8 ack)" `528 
F N "i2c_read" 1 884 ""
V L "stream" 1 884 "int8" `531 
V L "ack" 1 884 "int8" `532 
F B "i2c_read" 1 884 "int8(int8 stream,int8 ack)" `530 
F N "i2c_write" 1 885 ""
V L "data" 1 885 "int8" `534 
F B "i2c_write" 1 885 "int8(int8 data)" `533 
F N "i2c_write" 1 886 ""
V L "stream" 1 886 "int8" `536 
V L "data" 1 886 "int8" `537 
F B "i2c_write" 1 886 "int8(int8 stream,int8 data)" `535 
F N "i2c_start" 1 887 ""
F B "i2c_start" 1 887 "void()" `538 
F N "i2c_start" 1 888 ""
V L "stream" 1 888 "int8" `540 
F B "i2c_start" 1 888 "void(int8 stream)" `539 
F N "i2c_start" 1 889 ""
V L "stream" 1 889 "int8" `542 
V L "restart" 1 889 "int8" `543 
F B "i2c_start" 1 889 "void(int8 stream,int8 restart)" `541 
F N "i2c_stop" 1 890 ""
F B "i2c_stop" 1 890 "void()" `544 
F N "i2c_stop" 1 891 ""
V L "stream" 1 891 "int8" `546 
F B "i2c_stop" 1 891 "void(int8 stream)" `545 
F N "i2c_isr_state" 1 892 ""
F B "i2c_isr_state" 1 892 "int8()" `547 
F N "i2c_slaveaddr" 1 893 ""
V L "addr" 1 893 "int8" `549 
F B "i2c_slaveaddr" 1 893 "void(int8 addr)" `548 
F N "i2c_slaveaddr" 1 894 ""
V L "stream" 1 894 "int8" `551 
V L "addr" 1 894 "int8" `552 
F B "i2c_slaveaddr" 1 894 "void(int8 stream,int8 addr)" `550 
F N "i2c_poll" 1 895 ""
F B "i2c_poll" 1 895 "int8()" `553 
F N "i2c_poll" 1 896 ""
V L "stream" 1 896 "int8" `555 
F B "i2c_poll" 1 896 "int8(int8 stream)" `554 
F N "i2c_init" 1 897 ""
V L "baud" 1 897 "int32" `557 
F B "i2c_init" 1 897 "void(int32 baud)" `556 
F N "i2c_init" 1 898 ""
V L "stream" 1 898 "int8" `559 
V L "baud" 1 898 "int32" `560 
F B "i2c_init" 1 898 "void(int8 stream,int32 baud)" `558 
F N "i2c_transfer" 1 899 ""
V L "address" 1 899 "int8" `562 
V L "wData" 1 899 "*int8" `563 
V L "wCount" 1 899 "int8" `564 
F B "i2c_transfer" 1 899 "int8(int8 address,*int8 wData,int8 wCount)" `561 
F N "i2c_transfer" 1 900 ""
V L "address" 1 900 "int8" `566 
V L "wData" 1 900 "*int8" `567 
V L "wCount" 1 900 "int8" `568 
V L "rData" 1 900 "*int8" `569 
V L "rCount" 1 900 "*int8" `570 
F B "i2c_transfer" 1 900 "int8(int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `565 
F N "i2c_transfer" 1 901 ""
V L "stream" 1 901 "int8" `572 
V L "address" 1 901 "int8" `573 
V L "wData" 1 901 "*int8" `574 
V L "wCount" 1 901 "int8" `575 
F B "i2c_transfer" 1 901 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `571 
F N "i2c_transfer" 1 902 ""
V L "stream" 1 902 "int8" `577 
V L "address" 1 902 "int8" `578 
V L "wData" 1 902 "*int8" `579 
V L "wCount" 1 902 "int8" `580 
V L "rData" 1 902 "*int8" `581 
V L "rCount" 1 902 "*int8" `582 
F B "i2c_transfer" 1 902 "int8(int8 stream,int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `576 
F N "i2c_transfer_out" 1 903 ""
V L "address" 1 903 "int8" `584 
V L "wData" 1 903 "*int8" `585 
V L "wCount" 1 903 "int8" `586 
F B "i2c_transfer_out" 1 903 "int8(int8 address,*int8 wData,int8 wCount)" `583 
F N "i2c_transfer_out" 1 904 ""
V L "stream" 1 904 "int8" `588 
V L "address" 1 904 "int8" `589 
V L "wData" 1 904 "*int8" `590 
V L "wCount" 1 904 "int8" `591 
F B "i2c_transfer_out" 1 904 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `587 
F N "i2c_transfer_in" 1 905 ""
V L "address" 1 905 "int8" `593 
V L "rData" 1 905 "*int8" `594 
V L "rCount" 1 905 "int8" `595 
F B "i2c_transfer_in" 1 905 "int8(int8 address,*int8 rData,int8 rCount)" `592 
F N "i2c_transfer_in" 1 906 ""
V L "stream" 1 906 "int8" `597 
V L "address" 1 906 "int8" `598 
V L "rData" 1 906 "*int8" `599 
V L "rCount" 1 906 "int8" `600 
F B "i2c_transfer_in" 1 906 "int8(int8 stream,int8 address,*int8 rData,int8 rCount)" `596  "#use spi() Prototypes:"
F N "spi_xfer" 1 909 ""
F B "spi_xfer" 1 909 "int8()" `601 
F N "spi_xfer" 1 910 ""
f G "spi_xfer" 1 910 "int16()" `602 
F N "spi_xfer" 1 911 ""
f G "spi_xfer" 1 911 "int32()" `602 
F N "spi_xfer" 1 912 ""
V L "data" 1 912 "int8" `603 
F B "spi_xfer" 1 912 "int8(int8 data)" `602 
F N "spi_xfer" 1 913 ""
V L "data" 1 913 "int16" `605 
F B "spi_xfer" 1 913 "int16(int16 data)" `604 
F N "spi_xfer" 1 914 ""
V L "data" 1 914 "int32" `607 
F B "spi_xfer" 1 914 "int32(int32 data)" `606 
F N "spi_xfer" 1 915 ""
V L "stream" 1 915 "int8" `609 
V L "data" 1 915 "int8" `610 
F B "spi_xfer" 1 915 "int8(int8 stream,int8 data)" `608 
F N "spi_xfer" 1 916 ""
V L "stream" 1 916 "int8" `612 
V L "data" 1 916 "int16" `613 
F B "spi_xfer" 1 916 "int16(int8 stream,int16 data)" `611 
F N "spi_xfer" 1 917 ""
V L "stream" 1 917 "int8" `615 
V L "data" 1 917 "int32" `616 
F B "spi_xfer" 1 917 "int32(int8 stream,int32 data)" `614 
F N "spi_xfer" 1 918 ""
V L "stream" 1 918 "int8" `618 
V L "data" 1 918 "int8" `619 
V L "bits" 1 918 "int8" `620 
F B "spi_xfer" 1 918 "int8(int8 stream,int8 data,int8 bits)" `617 
F N "spi_xfer" 1 919 ""
V L "stream" 1 919 "int8" `622 
V L "data" 1 919 "int16" `623 
V L "bits" 1 919 "int8" `624 
F B "spi_xfer" 1 919 "int16(int8 stream,int16 data,int8 bits)" `621 
F N "spi_xfer" 1 920 ""
V L "stream" 1 920 "int8" `626 
V L "data" 1 920 "int32" `627 
V L "bits" 1 920 "int8" `628 
F B "spi_xfer" 1 920 "int32(int8 stream,int32 data,int8 bits)" `625 
F N "spi_init" 1 921 ""
V L "baud" 1 921 "int32" `630 
F B "spi_init" 1 921 "void(int32 baud)" `629 
F N "spi_init" 1 922 ""
V L "stream" 1 922 "int8" `632 
V L "baud" 1 922 "int32" `633 
F B "spi_init" 1 922 "void(int8 stream,int32 baud)" `631 
F N "spi_speed" 1 923 ""
V L "baud" 1 923 "int32" `635 
F B "spi_speed" 1 923 "void(int32 baud)" `634 
F N "spi_speed" 1 924 ""
V L "stream" 1 924 "int8" `637 
V L "baud" 1 924 "int32" `638 
F B "spi_speed" 1 924 "void(int8 stream,int32 baud)" `636 
F N "spi_speed" 1 925 ""
V L "stream" 1 925 "int8" `640 
V L "baud" 1 925 "int32" `641 
V L "clock" 1 925 "int32" `642 
F B "spi_speed" 1 925 "void(int8 stream,int32 baud,int32 clock)" `639 
F N "spi_prewrite" 1 926 ""
V L "data" 1 926 "int8" `644 
F B "spi_prewrite" 1 926 "void(int8 data)" `643 
F N "spi_prewrite" 1 927 ""
V L "data" 1 927 "int16" `646 
F B "spi_prewrite" 1 927 "void(int16 data)" `645 
F N "spi_prewrite" 1 928 ""
V L "data" 1 928 "int32" `648 
F B "spi_prewrite" 1 928 "void(int32 data)" `647 
F N "spi_prewrite" 1 929 ""
V L "??65535" 1 929 "int8" `650 
V L "data" 1 929 "int8" `651 
F B "spi_prewrite" 1 929 "void(int8 ,int8 data)" `649 
F N "spi_prewrite" 1 930 ""
V L "??65535" 1 930 "int8" `653 
V L "data" 1 930 "int16" `654 
F B "spi_prewrite" 1 930 "void(int8 ,int16 data)" `652 
F N "spi_prewrite" 1 931 ""
V L "??65535" 1 931 "int8" `656 
V L "data" 1 931 "int32" `657 
F B "spi_prewrite" 1 931 "void(int8 ,int32 data)" `655 
F N "spi_xfer_in" 1 932 ""
F B "spi_xfer_in" 1 932 "int8()" `658 
F N "spi_xfer_in" 1 933 ""
f G "spi_xfer_in" 1 933 "int16()" `659 
F N "spi_xfer_in" 1 934 ""
f G "spi_xfer_in" 1 934 "int32()" `659 
F N "spi_xfer_in" 1 935 ""
V L "bits" 1 935 "int8" `660 
F B "spi_xfer_in" 1 935 "int8(int8 bits)" `659 
F N "spi_xfer_in" 1 936 ""
V L "bits" 1 936 "int8" `662 
f G "spi_xfer_in" 1 936 "int16(int8 bits)" `661 
F N "spi_xfer_in" 1 937 ""
V L "bits" 1 937 "int8" `662 
f G "spi_xfer_in" 1 937 "int32(int8 bits)" `661 
F N "spi_xfer_in" 1 938 ""
V L "stream" 1 938 "int8" `662 
V L "bits" 1 938 "int8" `663 
F B "spi_xfer_in" 1 938 "int8(int8 stream,int8 bits)" `661 
F N "spi_xfer_in" 1 939 ""
V L "stream" 1 939 "int8" `662 
V L "bits" 1 939 "int8" `666 
f G "spi_xfer_in" 1 939 "int16(int8 stream,int8 bits)" `664 
F N "spi_xfer_in" 1 940 ""
V L "stream" 1 940 "int8" `662 
V L "bits" 1 940 "int8" `666 
f G "spi_xfer_in" 1 940 "int32(int8 stream,int8 bits)" `664 
F N "spi_transfer" 1 941 ""
V L "wData" 1 941 "*int8" `665 
V L "rData" 1 941 "*int8" `666 
V L "count" 1 941 "int16" `667 
F B "spi_transfer" 1 941 "void(*int8 wData,*int8 rData,int16 count)" `664 
F N "spi_transfer" 1 942 ""
V L "stream" 1 942 "int8" `669 
V L "wData" 1 942 "*int8" `670 
V L "rData" 1 942 "*int8" `671 
V L "count" 1 942 "int16" `672 
F B "spi_transfer" 1 942 "void(int8 stream,*int8 wData,*int8 rData,int16 count)" `668 
F N "spi_transfer_write" 1 943 ""
V L "wData" 1 943 "*int8" `674 
V L "count" 1 943 "int16" `675 
F B "spi_transfer_write" 1 943 "void(*int8 wData,int16 count)" `673 
F N "spi_transfer_write" 1 944 ""
V L "stream" 1 944 "int8" `677 
V L "wData" 1 944 "*int8" `678 
V L "count" 1 944 "int16" `679 
F B "spi_transfer_write" 1 944 "void(int8 stream,*int8 wData,int16 count)" `676 
F N "spi_transfer_read" 1 945 ""
V L "rData" 1 945 "*int8" `681 
V L "count" 1 945 "int16" `682 
F B "spi_transfer_read" 1 945 "void(*int8 rData,int16 count)" `680 
F N "spi_transfer_read" 1 946 ""
V L "stream" 1 946 "int8" `684 
V L "rData" 1 946 "*int8" `685 
V L "count" 1 946 "int16" `686 
F B "spi_transfer_read" 1 946 "void(int8 stream,*int8 rData,int16 count)" `683  "#use rtos() Prototypes:"
F N "rtos_run" 1 949 ""
F B "rtos_run" 1 949 "void()" `687 
F N "rtos_yield" 1 950 ""
F B "rtos_yield" 1 950 "void()" `688 
F N "rtos_enable" 1 951 ""
V L "task" 1 951 "int8" `690 
F B "rtos_enable" 1 951 "void(int8 task)" `689 
F N "rtos_disable" 1 952 ""
V L "task" 1 952 "int8" `692 
F B "rtos_disable" 1 952 "void(int8 task)" `691 
F N "rtos_terminate" 1 953 ""
F B "rtos_terminate" 1 953 "void()" `693 
F N "rtos_await" 1 954 ""
V L "flag" 1 954 "int8" `695 
F B "rtos_await" 1 954 "void(int8 flag)" `694 
F N "rtos_wait" 1 955 ""
V L "sem" 1 955 "int8" `697 
F B "rtos_wait" 1 955 "void(int8 sem)" `696 
F N "rtos_signal" 1 956 ""
V L "sem" 1 956 "int8" `699 
F B "rtos_signal" 1 956 "void(int8 sem)" `698 
F N "rtos_msg_send" 1 957 ""
V L "task" 1 957 "int8" `701 
V L "msg" 1 957 "int8" `702 
F B "rtos_msg_send" 1 957 "void(int8 task,int8 msg)" `700 
F N "rtos_msg_read" 1 958 ""
F B "rtos_msg_read" 1 958 "int8()" `703 
F N "rtos_msg_poll" 1 959 ""
F B "rtos_msg_poll" 1 959 "int8()" `704 
F N "rtos_overrun" 1 960 ""
V L "task" 1 960 "int8" `706 
F B "rtos_overrun" 1 960 "int8(int8 task)" `705 
F N "rtos_stats" 1 961 ""
V L "task" 1 961 "int8" `708 
V L "stat" 1 961 "*int8" `709 
F B "rtos_stats" 1 961 "void(int8 task,*int8 stat)" `707  "#use timer() Prototypes:"
F N "get_ticks" 1 964 ""
F B "get_ticks" 1 964 "int8()" `710 
F N "get_ticks" 1 965 ""
f G "get_ticks" 1 965 "int16()" `711 
F N "get_ticks" 1 966 ""
f G "get_ticks" 1 966 "int32()" `711 
F N "get_ticks" 1 967 ""
V L "stream" 1 967 "int8" `712 
F B "get_ticks" 1 967 "int8(int8 stream)" `711 
F N "get_ticks" 1 968 ""
V L "stream" 1 968 "int8" `714 
f G "get_ticks" 1 968 "int16(int8 stream)" `713 
F N "get_ticks" 1 969 ""
V L "stream" 1 969 "int8" `714 
f G "get_ticks" 1 969 "int32(int8 stream)" `713 
F N "set_ticks" 1 970 ""
V L "value" 1 970 "int8" `714 
F B "set_ticks" 1 970 "void(int8 value)" `713 
F N "set_ticks" 1 971 ""
V L "value" 1 971 "int16" `716 
F B "set_ticks" 1 971 "void(int16 value)" `715 
F N "set_ticks" 1 972 ""
V L "value" 1 972 "int32" `718 
F B "set_ticks" 1 972 "void(int32 value)" `717 
F N "set_ticks" 1 973 ""
V L "stream" 1 973 "int8" `720 
V L "value" 1 973 "int8" `721 
F B "set_ticks" 1 973 "void(int8 stream,int8 value)" `719 
F N "set_ticks" 1 974 ""
V L "stream" 1 974 "int8" `723 
V L "value" 1 974 "int16" `724 
F B "set_ticks" 1 974 "void(int8 stream,int16 value)" `722 
F N "set_ticks" 1 975 ""
V L "stream" 1 975 "int8" `726 
V L "value" 1 975 "int32" `727 
F B "set_ticks" 1 975 "void(int8 stream,int32 value)" `725  "#use pwm() Prototypes:"
F N "pwm_on" 1 978 ""
F B "pwm_on" 1 978 "void()" `728 
F N "pwm_on" 1 979 ""
V L "stream" 1 979 "int8" `730 
F B "pwm_on" 1 979 "void(int8 stream)" `729 
F N "pwm_off" 1 980 ""
F B "pwm_off" 1 980 "void()" `731 
F N "pwm_off" 1 981 ""
V L "stream" 1 981 "int8" `733 
F B "pwm_off" 1 981 "void(int8 stream)" `732 
F N "pwm_set_duty" 1 982 ""
V L "duty" 1 982 "int16" `735 
F B "pwm_set_duty" 1 982 "void(int16 duty)" `734 
F N "pwm_set_duty" 1 983 ""
V L "stream" 1 983 "int8" `737 
V L "duty" 1 983 "int16" `738 
F B "pwm_set_duty" 1 983 "void(int8 stream,int16 duty)" `736 
F N "pwm_set_duty_percent" 1 984 ""
V L "percent" 1 984 "int16" `740 
F B "pwm_set_duty_percent" 1 984 "void(int16 percent)" `739 
F N "pwm_set_duty_percent" 1 985 ""
V L "stream" 1 985 "int8" `742 
V L "percent" 1 985 "int16" `743 
F B "pwm_set_duty_percent" 1 985 "void(int8 stream,int16 percent)" `741 
F N "pwm_set_frequency" 1 986 ""
V L "frequency" 1 986 "int32" `745 
F B "pwm_set_frequency" 1 986 "void(int32 frequency)" `744 
F N "pwm_set_frequency" 1 987 ""
V L "stream" 1 987 "int8" `747 
V L "frequency" 1 987 "int32" `748 
F B "pwm_set_frequency" 1 987 "void(int8 stream,int32 frequency)" `746 
F N "pwm_get_duty_period" 1 988 ""
F B "pwm_get_duty_period" 1 988 "int16()" `749 
F N "pwm_get_duty_period" 1 989 ""
V L "stream" 1 989 "int8" `751 
F B "pwm_get_duty_period" 1 989 "int16(int8 stream)" `750  "#use capture() Prototypes:"
F N "get_capture_time" 1 992 ""
F B "get_capture_time" 1 992 "int16()" `752 
F N "get_capture_time" 1 993 ""
V L "stream" 1 993 "int8" `754 
F B "get_capture_time" 1 993 "int16(int8 stream)" `753 
F N "get_capture_event" 1 994 ""
F B "get_capture_event" 1 994 "int8()" `755 
F N "get_capture_event" 1 995 ""
V L "stream" 1 995 "int8" `757 
F B "get_capture_event" 1 995 "int8(int8 stream)" `756  "Enviroment Prototypes:"
c L "get_capture_event" 1 3 2 "FUNCTION"
F N "goto_address" 1 1008 ""
V L "address" 1 1008 "int32" `759 
F B "goto_address" 1 1008 "void(int32 address)" `758 
F N "label_address" 1 1009 ""
V L "label" 1 1009 "int32" `761 
F B "label_address" 1 1009 "int32(int32 label)" `760  "Program Memory Read Prototypes:"
F N "read_program_memory" 1 1012 ""
V L "address" 1 1012 "int32" `763 
V L "DataPtr" 1 1012 "*int8" `764 
V L "count" 1 1012 "int16" `765 
F B "read_program_memory" 1 1012 "void(int32 address,*int8 DataPtr,int16 count)" `762 
F N "read_program_eeprom" 1 1013 ""
V L "address" 1 1013 "int32" `767 
F B "read_program_eeprom" 1 1013 "int16(int32 address)" `766  "Program Memory Write Prototypes:"
F N "write_program_memory" 1 1016 ""
V L "address" 1 1016 "int32" `769 
V L "DataPtr" 1 1016 "*int8" `770 
V L "count" 1 1016 "int16" `771 
F B "write_program_memory" 1 1016 "void(int32 address,*int8 DataPtr,int16 count)" `768 
F N "write_program_eeprom" 1 1017 ""
V L "address" 1 1017 "int32" `773 
V L "data" 1 1017 "int16" `774 
F B "write_program_eeprom" 1 1017 "void(int32 address,int16 data)" `772  "EEPROM Prototypes:"
D G "__EEADDRESS__" 1 1022 "unsigned int16"
F N "read_eeprom" 1 1027 ""
V L "address" 1 1027 "int16" `776 
F B "read_eeprom" 1 1027 "int8(int16 address)" `775 
F N "write_eeprom" 1 1028 ""
V L "address" 1 1028 "int16" `778 
V L "value" 1 1028 "int8" `779 
F B "write_eeprom" 1 1028 "void(int16 address,int8 value)" `777  "#use touchpad() Prototypes:"
F N "touchpad_state" 1 1031 ""
V L "state" 1 1031 "int8" `781 
F B "touchpad_state" 1 1031 "void(int8 state)" `780 
F N "touchpad_getc" 1 1032 ""
F B "touchpad_getc" 1 1032 "int8()" `782 
F N "touchpad_hit" 1 1033 ""
F B "touchpad_hit" 1 1033 "int8()" `783  "INT"
c L "touchpad_hit" 1 3 4 "FUNCTION"
F N "enable_interrupts" 1 1039 ""
V L "interrupt" 1 1039 "int32" `785 
F B "enable_interrupts" 1 1039 "void(int32 interrupt)" `784 
F N "disable_interrupts" 1 1040 ""
V L "interrupt" 1 1040 "int32" `787 
F B "disable_interrupts" 1 1040 "void(int32 interrupt)" `786 
F N "clear_interrupt" 1 1041 ""
V L "interrupt" 1 1041 "int32" `789 
F B "clear_interrupt" 1 1041 "void(int32 interrupt)" `788 
F N "interrupt_active" 1 1042 ""
V L "interrupt" 1 1042 "int32" `791 
F B "interrupt_active" 1 1042 "int8(int32 interrupt)" `790 
F N "interrupt_enabled" 1 1043 ""
V L "interrupt" 1 1043 "int32" `793 
F B "interrupt_enabled" 1 1043 "int8(int32 interrupt)" `792 
F N "ext_int_edge" 1 1044 ""
V L "source" 1 1044 "int8" `795 
V L "edge" 1 1044 "int8" `796 
F B "ext_int_edge" 1 1044 "void(int8 source,int8 edge)" `794 
F N "jump_to_isr" 1 1045 ""
V L "address" 1 1045 "int16" `798 
F B "jump_to_isr" 1 1045 "void(int16 address)" `797  "Constants used in EXT_INT_EDGE() are:"
D G "L_TO_H" 1 1047 "0x40"
D G "H_TO_L" 1 1048 "0"
D G "GLOBAL" 1 1050 "0xF2C0"
D G "PERIPH" 1 1051 "0xF240"
D G "INT_RTCC" 1 1052 "0x00F220"
D G "INT_TIMER0" 1 1053 "0x00F220"
D G "INT_TIMER1" 1 1054 "0x009D01"
D G "INT_TIMER2" 1 1055 "0x009D02"
D G "INT_TIMER3" 1 1056 "0x00A002"
D G "INT_EXT_L2H" 1 1057 "0x5000F210"
D G "INT_EXT_H2L" 1 1058 "0x6000F210"
D G "INT_EXT" 1 1059 "0x00F210"
D G "INT_EXT1_L2H" 1 1060 "0x5001F008"
D G "INT_EXT1_H2L" 1 1061 "0x6001F008"
D G "INT_EXT1" 1 1062 "0x00F008"
D G "INT_EXT2_L2H" 1 1063 "0x5002F010"
D G "INT_EXT2_H2L" 1 1064 "0x6002F010"
D G "INT_EXT2" 1 1065 "0x00F010"
D G "INT_RB" 1 1066 "0x01FFF208"
D G "INT_AD" 1 1067 "0x009D40"
D G "INT_RDA" 1 1068 "0x009D20"
D G "INT_TBE" 1 1069 "0x009D10"
D G "INT_SSP" 1 1070 "0x009D08"
D G "INT_CCP1" 1 1071 "0x009D04"
D G "INT_CCP2" 1 1072 "0x00A001"
D G "INT_BUSCOL" 1 1073 "0x00A008"
D G "INT_COMP" 1 1074 "0x00A040"
D G "INT_EEPROM" 1 1075 "0x00A010"
D G "INT_TBE2" 1 1076 "0x00A310"
D G "INT_RDA2" 1 1077 "0x00A320"
D G "INT_OSCF" 1 1078 "0x00A080"
D G "INT_HLVD" 1 1079 "0x00A004"
D G "INT_BUSCOL2" 1 1080 "0x00A340"
D G "INT_COMP2" 1 1081 "0x00A020"
D G "INT_SSP2" 1 1082 "0x00A380"
D G "INT_TIMER4" 1 1083 "0x007D01"
D G "INT_TIMER5" 1 1084 "0x007D02"
D G "INT_TIMER6" 1 1085 "0x007D04"
D G "INT_CCP3" 1 1086 "0x007A01"
D G "INT_CCP4" 1 1087 "0x007A02"
D G "INT_CCP5" 1 1088 "0x007A04"
D G "INT_TMR1G" 1 1089 "0x00A301"
D G "INT_TMR3G" 1 1090 "0x00A302"
D G "INT_TMR5G" 1 1091 "0x00A304"
D G "INT_CTMU" 1 1092 "0x00A308"
D G "INT_RB4" 1 1093 "0x110F208"
D G "INT_RB5" 1 1094 "0x120F208"
D G "INT_RB6" 1 1095 "0x140F208"
D G "INT_RB7" 1 1096 "0x180F208"
D G "SIMPLE_SCHEDULER_H" 2 2 ""
F N "*task_fn_t" 2 4 ""
T G "*task_fn_t" 2 4 "void()" `803 
D G "SCHED_MAX_TASKS" 2 6 "6"
C L "*task_fn_t" 2 10 1 "FUNCTION"
T G "task" 2 11 "{task_fn_t fn,int8 active}" `808 
T G "Semaphore" 2 15 "{int8 count}" `811 
C L "*task_fn_t" 2 10 1 "FUNCTION"
C L "*task_fn_t" 2 10 1 "FUNCTION"
T G "Mailbox" 2 20 "{int8 full,int8[8] data}" `815  "Scheduler API*"
F N "sched_init" 2 23 ""
f G "sched_init" 2 23 "void()" `816 
F N "sched_add_task" 2 24 ""
V L "fn" 2 24 "task_fn_t" `818 
f G "sched_add_task" 2 24 "int8(task_fn_t fn)" `817 
F N "sched_run_cycle" 2 25 ""
f G "sched_run_cycle" 2 25 "void()" `819  "run one cycle"
F N "sched_run_forever" 2 26 ""
V L "cycle_delay_ms" 2 26 "int8" `821 
f G "sched_run_forever" 2 26 "void(int8 cycle_delay_ms)" `820 
F N "sched_yield" 2 28 ""
f G "sched_yield" 2 28 "void()" `822  "Semaphore API*"
F N "sem_init" 2 31 ""
V L "s" 2 31 " *" `824 
V L "init" 2 31 "int8" `825 
f G "sem_init" 2 31 "void( * s,int8 init)" `823 
F N "sem_trywait" 2 32 ""
V L "s" 2 32 " *" `827 
f G "sem_trywait" 2 32 "int8( * s)" `826 
F N "sem_wait" 2 33 ""
V L "s" 2 33 " *" `829 
f G "sem_wait" 2 33 "void( * s)" `828  "blocks co-operatively: sets count-- if >0 else returns 0 so task can yield *"
F N "sem_signal" 2 34 ""
V L "s" 2 34 " *" `831 
f G "sem_signal" 2 34 "void( * s)" `830  "mailbox*"
F N "mbox_init" 2 37 ""
V L "m" 2 37 " *" `833 
f G "mbox_init" 2 37 "void( * m)" `832 
F N "mbox_send" 2 38 ""
V L "m" 2 38 " *" `835 
V L "buf" 2 38 "*int8" `836 
V L "size" 2 38 "int8" `837 
f G "mbox_send" 2 38 "int8( * m,*int8 buf,int8 size)" `834 
F N "mbox_receive" 2 39 ""
V L "m" 2 39 " *" `840 
V L "out" 2 39 "*int8" `841 
V L "size" 2 39 "int8" `842 
f G "mbox_receive" 2 39 "int8( * m,*int8 out,int8 size)" `839 
V G "task_list" 0 5 "task[6]" `844 
F N "sched_init" 0 7 ""
F G "sched_init" 0 7 "void()" `816 
V L "i" 0 8 "int8" `845 
F N "sched_add_task" 0 16 ""
V L "fn" 0 16 "task_fn_t" `847 
F G "sched_add_task" 0 16 "int8(task_fn_t fn)" `817 
V L "i" 0 17 "int8" `846 
C L "sched_add_task" 0 25 1 "FUNCTION"
F N "sched_run_cycle" 0 28 ""
F G "sched_run_cycle" 0 28 "void()" `819 
V L "i" 0 29 "int8" `847 
F N "sched_run_forever" 0 37 ""
V L "cycle_delay_ms" 0 37 "int8" `850 
F G "sched_run_forever" 0 37 "void(int8 cycle_delay_ms)" `820 
C L "sched_yield" 0 25 1 "FUNCTION"
F N "sched_yield" 0 45 ""
F G "sched_yield" 0 45 "void()" `822  "In a cooperative scheduler, yield just returns control"
C L "sched_yield" 0 25 2 "FUNCTION"
C L "sem_init" 0 25 1 "FUNCTION"
F N "sem_init" 0 54 ""
V L "s" 0 54 " *" `824 
V L "init" 0 54 "int8" `851 
F G "sem_init" 0 54 "void( * s,int8 init)" `823 
F N "sem_trywait" 0 60 ""
V L "s" 0 60 " *" `850 
F G "sem_trywait" 0 60 "int8( * s)" `826 
F N "sem_wait" 0 69 ""
V L "s" 0 69 " *" `850 
F G "sem_wait" 0 69 "void( * s)" `828 
F N "sem_signal" 0 77 ""
V L "s" 0 77 " *" `850 
F G "sem_signal" 0 77 "void( * s)" `830 
C L "mbox_init" 0 25 1 "FUNCTION"
F N "mbox_init" 0 84 ""
V L "m" 0 84 " *" `850 
F G "mbox_init" 0 84 "void( * m)" `832 
V L "i" 0 85 "int8" `849 
F N "mbox_send" 0 94 ""
V L "m" 0 94 " *" `835 
V L "buf" 0 94 "*int8" `836 
V L "size" 0 94 "int8" `853 
F G "mbox_send" 0 94 "int8( * m,*int8 buf,int8 size)" `834 
C L "mbox_send" 0 25 1 "FUNCTION"
V L "i" 0 98 "int8" `850 
C L "mbox_send" 0 25 1 "FUNCTION"
F N "mbox_receive" 0 105 ""
V L "m" 0 105 " *" `840 
V L "out" 0 105 "*int8" `841 
V L "size" 0 105 "int8" `854 
F G "mbox_receive" 0 105 "int8( * m,*int8 out,int8 size)" `839 
C L "mbox_receive" 0 25 1 "FUNCTION"
V L "i" 0 109 "int8" `851 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "set_slow_slew_a" 1 0
F B "set_slow_slew_b" 1 0
F B "set_slow_slew_c" 1 0
F B "set_slow_slew_d" 1 0
F B "set_slow_slew_e" 1 0
F B "port_b_pullups" 1 0
F B "port_e_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "set_analog_pins" 0 255
F B "setup_adc_reference" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_timer_4" 3 0
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_timer_6" 3 0
F B "get_timer6" 0 0
F B "set_timer6" 1 0
F B "setup_timer_5" 1 0
F B "get_timer5" 0 0
F B "set_timer5" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 2
F B "set_pwm2_duty" 1 0
F B "setup_ccp3" 1 2
F B "set_pwm3_duty" 1 0
F B "setup_ccp4" 1 0
F B "set_pwm4_duty" 1 0
F B "setup_ccp5" 1 0
F B "set_pwm5_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "pll_locked" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "setup_dac" 1 0
F B "dac_write" 1 0
F B "brownout_enable" 1 0
F B "disable_peripheral" 2 0
F B "enable_peripheral" 2 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
